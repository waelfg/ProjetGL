; start main program
	BRA Deb_prog
; Début du programme
Deb_prog:
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
	TSTO #1
	BOV pile_pleine
	ADDSP #1
; Main program
; Beginning of main instructions:
	LOAD #0, R2
	STORE R2, 1(GB)
	LOAD #0, R2
	STORE R2, 2(GB)
	LOAD #1, R2
	SUB #0, R2
	STORE R2, 3(GB)
	LOAD #0, R2
	STORE R2, 4(GB)
	LOAD #1, R2
	STORE R2, 5(GB)
	TSTO #6
	BOV pile_pleine
	ADDSP #6
while0:
	LOAD 5(GB), R2
	CMP #1, R2
	BNE Finw0
	WSTR "Choisissez une operation "
	WSTR "[0]add [1]sub [2]mult [3]div [4]modulo "
	WNL
	RINT
	LOAD R1, R3
	STORE R3, 3(GB)
	LOAD 3(GB), R4
	LOAD #0, R5
	CMP R5, R4
	BGE greateq1
	LOAD #0, R5
	BRA Fin_greateq1
greateq1:
	LOAD #1, R5
Fin_greateq1:
	CMP #0, R5
	BEQ else11
	LOAD 3(GB), R4
	LOAD #3, R6
	CMP R6, R4
	BLE lowereq2
	LOAD #0, R6
	BRA Fin_lowereq2
lowereq2:
	LOAD #1, R6
Fin_lowereq2:
	CMP #0, R6
	BEQ else12
	LOAD #0, R4
	STORE R4, 5(GB)
	BRA fin_if12
else12:
	WSTR "entrez une opération valide"
fin_if12:
	BRA fin_if11
else11:
	WSTR "entrez une opération valide"
fin_if11:
	BRA while0
Finw0:
	LOAD 3(GB), R5
	LOAD #2, R6
	CMP R6, R5
	BEQ eq3
	LOAD #0, R6
	BRA Fin_eq3
eq3:
	LOAD #1, R6
Fin_eq3:
	CMP #0, R6
	BEQ else24
	WSTR "entrez left OP"
	RINT
	LOAD R1, R5
	STORE R5, 1(GB)
	WSTR "entrez right OP"
	RINT
	LOAD R1, R7
	STORE R7, 2(GB)
	LOAD 1(GB), R8
	LOAD 2(GB), R9
	ADD R8, R9
	STORE R9, 4(GB)
	BRA fin_if24
else24:
fin_if24:
	LOAD 4(GB), R1
	WINT
	HALT
; Methode Equals
code.Object.equals:
	PUSH R2
	PUSH R3
	LOAD -2(LB), R2
	LOAD -3(LB), R3
	CMP R2, R3
	BEQ true
	ADD #0, R0
	BRA fin
true:
	ADD #0, R0
fin:
	BRA fin.Object.equals
	WSTR "Erreur: sortie de la méthode equals sans return"
	WNL
	ERROR
fin.Object.equals:
	POP R3
	POP R2
	RTS
pile_pleine:
	WSTR "Erreur: la pile est pleine"
	WNL
	ERROR
dereferencement_null:
	WSTR "Erreur: dereferencement de null"
	WNL
	ERROR
tas_plein:
	WSTR "Erreur: allocation impossible, tas plein"
	WNL
	ERROR
; end main program
