parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import java.io.PrintStream;
    import fr.ensimag.deca.tools.SymbolTable;
}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
    
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $main.start);
            
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
             
        }
    : decl_var_set[$tree]* 
            
    ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI 
            
            

;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
    	assert($dv1.tree != null);
        $l.add($dv1.tree);
        } (COMMA dv2=decl_var[$t] {
        assert($dv2.tree != null); 
        $l.add($dv2.tree);
        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
		AbstractInitialization inz=null;
        }
    : i=ident {
    	inz = new NoInitialization();
        
    	
        }
      (EQUALS e=expr {
      	assert($e.tree !=null);
      	inz = new Initialization($e.tree);
      	setLocation(inz, $EQUALS);
        }
      )? {
      	$tree=new DeclVar($t, $i.tree, inz);
      	setLocation($tree, $i.start);
        }
    ;

list_inst returns[ListInst tree]
@init {
    $tree =new ListInst();
}
    : (inst {
            assert($inst.tree !=null);
            $tree.add($inst.tree);
            setLocation($tree,$inst.start);
        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree ; 
            setLocation($tree, $e1.start);
        }
    | SEMI {
            $tree = new NoOperation();
            setLocation ($tree, $SEMI) ;
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false,$list_expr.tree)  ;
            setLocation ($tree , $PRINT) ; 
}
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false,$list_expr.tree) ;
            setLocation($tree, $PRINTLN) ;
        }
   | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true,$list_expr.tree) ;
            setLocation($tree,$PRINTX) ; 

        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true,$list_expr.tree) ;
            setLocation($tree, $PRINTLNX) ;          
}
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree ; 
            setLocation($tree,$if_then_else.start) ; 
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree , $body.tree) ; 
            setLocation($tree,$WHILE) ; 
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree) ; 
            setLocation($tree , $RETURN) ; 
        }
;

if_then_else returns[IfThenElse tree]//A FAIRE
@init {
           ListInst elseBranch = new ListInst() ;
           IfThenElse elseifBranch = null ;
           boolean instelse = false ;
           ListInst elseBranch1 = new ListInst();
           BooleanLiteral cond = new BooleanLiteral(true);


}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE { 
            $tree  = new IfThenElse($condition.tree , $li_if.tree, elseBranch) ; 
            setLocation($tree,$if1);
           
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
            elseifBranch = new IfThenElse($elsif_cond.tree , $elsif_li.tree ,new ListInst());
            setLocation($elsif_li.tree , $elsif) ;
            elseBranch.add(elseifBranch);

            
            
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
            if (elseifBranch == null) {
                 $tree = new IfThenElse($condition.tree, $li_if.tree , $li_else.tree) ;
                 setLocation($tree, $if1);
            }
            else {
                IfThenElse nif = new IfThenElse($elsif_cond.tree, $elsif_li.tree, $li_else.tree);
                setLocation(nif, $elsif);
                elseBranch.set(elseBranch.size() - 1, nif);
            }



        }
      )?{

      }
    ;

list_expr returns[ListExpr tree]
@init   {
            $tree = new ListExpr();
        }
    : (e1=expr {
            assert($e1.tree != null) ; 
            $tree.add($e1.tree) ; 
            setLocation($tree,$e1.start);
        }
       (COMMA e2=expr {
            assert ($e2.tree != null) ; 
            $tree.add($e2.tree) ; 
            setLocation($tree,$e2.start);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree ; 
            setLocation($tree,$assign_expr.start) ; 
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign ((AbstractLValue)$e.tree,$e2.tree) ; 
            setLocation($tree,$EQUALS);
            
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree= $e.tree ; 
        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start) ; 
           
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $OR);
           
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation ($tree ,$e.start) ; 
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $AND);
           
            
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $EQEQ);
           
            
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $NEQ);
        
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree ,$e.start);
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $LEQ);
           
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $GEQ);
            
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $GT);
            
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $LT);
         
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree,$type.tree);
            setLocation($tree,$INSTANCEOF);
        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree , $e.start);
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree, $e2.tree);
            setLocation($tree, $PLUS);
           
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree, $e2.tree);
            setLocation($tree, $MINUS);
            
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $TIMES);
            
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $SLASH);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $PERCENT);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree =  new UnaryMinus($e.tree);
            setLocation ($tree ,$op );
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree) ; 
            setLocation ($tree ,$op) ; 
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree ; 
            setLocation($tree , $select_expr.start) ; 
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree ; 
            setLocation ($tree , $e.start) ; 
        }
    | e1=select_expr DOT i=ident {
        }
        (o=OPARENT args=list_expr CPARENT {
            // we matched "e1.i(args)"
            assert($args.tree != null);
            $tree = new SelectionMethod($e1.tree,$i.tree,$args.tree);
            setLocation($tree, $o);
        }
        | /* epsilon */ {
            // we matched "e.i"
            assert($e1.tree != null) ; 
            assert ($i.tree != null) ;
            $tree = new SelectionField($e1.tree,$i.tree);
             
             
        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree ; 
            setLocation($tree , $ident.start) ; 
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree ; 
            setLocation($tree,$expr.start) ; 
        }
    | READINT OPARENT CPARENT {
            $tree = new ReadInt() ; 
            setLocation($tree,$READINT) ; 
            
        }
    | READFLOAT OPARENT CPARENT {
            $tree = new ReadFloat();
            setLocation($tree,$READFLOAT);
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree);
            setLocation($tree, $NEW);
        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new Cast($expr.tree, $type.tree);
        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree ; 
            setLocation($tree,$literal.start);
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree,$ident.start);
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
    	$tree = new IntLiteral(Integer.parseInt($INT.text));
        setLocation($tree,$INT);
        }
    | fd=FLOAT {
        
    	$tree = new FloatLiteral(Float.parseFloat($fd.text));
        setLocation($tree,$fd);
        
}
    | STRING {
        $tree = new StringLiteral($STRING.text);
        setLocation($tree,$STRING);
        }
    | TRUE {
    	$tree=new BooleanLiteral(true);
    	setLocation($tree,$TRUE);
        }
    | FALSE {
    	$tree=new BooleanLiteral(false);
    	setLocation($tree,$FALSE);
        }
    | THIS {
    	$tree = new This();
    	setLocation($tree,$THIS);
        }
    | NULL {

        $tree = new Null() ;
        setLocation($tree,$NULL) ;


        }
    ;

ident returns[AbstractIdentifier tree]
    : IDENT {
        SymbolTable s = new SymbolTable();
    	$tree = new Identifier(s.create($IDENT.text));
    	setLocation($tree, $IDENT);
        }
    ;

/****     Class related rules     ****/
//FAIT
list_classes returns[ListDeclClass tree]
    @init {
    		$tree= new ListDeclClass();
    }
    :
      (c1=class_decl {
      		assert($c1.tree!=null);
      		$tree.add($c1.tree);
        }
      )*
    ;
//FAIT
class_decl returns[AbstractDeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
    	assert($name.tree!=null);
    	assert($superclass.tree!=null);
    	assert($class_body.field!=null);
    	assert($class_body.method!=null);
        $tree = new DeclClass($name.tree, $superclass.tree, $class_body.field, $class_body.method);
        setLocation($tree, $CLASS);                                                                 
        }
    ;
//FAIT
class_extension returns[AbstractIdentifier tree]
    : EXTENDS ident {
        assert($ident.tree!=null);
        $tree=$ident.tree;
        setLocation($tree, $EXTENDS);
        }
    | /* epsilon */ {
    	SymbolTable sym = new SymbolTable();
    	$tree = new Identifier(sym.create("Object"));
        }
    ;
//FAIT
class_body returns[ListDeclField field, ListDeclMethod method]
    @init {
    	$field = new ListDeclField();
    	$method = new ListDeclMethod();
    }
    : 
    (m=decl_method {
    		assert($m.tree!=null);
    		$method.add($m.tree);
        }
      |decl_field_set[$field]
      )*
    ;
//FAIT
decl_field_set[ListDeclField field] returns[ListDeclField tree]
    : v=visibility t=type list=list_decl_field[$field, $t.tree, $v.visib]
      SEMI
    ;
//FAIT
visibility returns[Visibility visib]
    : /* epsilon */ {
    	$visib = Visibility.PUBLIC;
        }
    | PROTECTED {
    	$visib = Visibility.PROTECTED;
        }
    ;
//FAIT
list_decl_field[ListDeclField field, AbstractIdentifier t, Visibility v]
        :
        dv1=decl_field[$t, $v]{
        assert($dv1.tree!=null);
        $field.add($dv1.tree);
}
        (COMMA dv2=decl_field[$t, $v]{
        assert($dv2.tree!=null);
        $field.add($dv2.tree);
}
      )*
    ;
//FAIT
decl_field[AbstractIdentifier t,  Visibility v] returns [AbstractDeclField tree]
@init {
    AbstractInitialization inz=null;
}
    : i=ident {
            inz = new NoInitialization();
        }
      (EQUALS e=expr {
            assert($e.tree!=null);
            inz = new Initialization($e.tree);
            setLocation(inz, $EQUALS);
        }
      )? {
            $tree = new DeclField($i.tree,$t,inz,$v);
            setLocation($tree, $i.start);
        }
    ;
//TODO
decl_method returns[AbstractDeclMethod tree]
: type ident OPARENT params=list_params CPARENT (block {
        $tree = new DeclMethod($ident.tree, $type.tree, new MethodBody($block.decls, $block.insts) ,$list_params.tree);
        }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
      	$tree = new DeclMethod($ident.tree, $type.tree, new MethodAsmBody(new StringLiteral($code.text)) ,$list_params.tree);
        }
      ) {
      	setLocation($tree, $type.start);
        }
    ;
//FAIT
list_params returns[ListDeclParam tree]
@init{
      $tree = new ListDeclParam();
}
    : (p1=param {
      assert($p1.tree!=null);
      $tree.add($p1.tree);
        } (COMMA p2=param {
      assert($p2.tree!=null);
      $tree.add($p2.tree);
        }
      )*)?
    ;
//FAIT
multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;
//FAIT
param returns[AbstractDeclParam tree]
    : type ident {
        assert($type.tree != null) ;
        assert($ident.tree != null) ;
        $tree = new DeclParam($ident.tree, $type.tree);
        setLocation($tree, $type.start);
        }
    ;
